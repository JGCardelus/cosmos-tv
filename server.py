from libs import Path, Compiler, Compiler_Component
from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit
from engineio.payload import Payload

import io
import os
import socket
import time

import config

import framework as fmk

# SERVER VARS
port = config.port
Payload.max_decode_packets = 24

# CREATE SERVER
web = Flask("cosmostv")
web.config["SECRET_KEY"] = "cosmostv"

# CREATE WEBSOCKET
server = SocketIO(web)

# CONNECTION VALIDATION
@server.on("validate_connection")
def validate_connection():
    print("User connected, validating websocket connection")
    server.emit("connection_validated")

    fmk.start_frontend()

# FRONTED COMUNICATION
def emit(header, data):
    server.emit(header, data)

def raise_error(message):
    server.emit("error", message)

def raise_not(message):
    server.emit("notification", message)

# EVENTS
@server.on("start-app")
def request_start(app_id):
    fmk.start_app(app_id, True)

@server.on("focus-app")
def request_focus_app(app_id):
    fmk.focus_app(app_id, False)

@server.on("close-app")
def request_close_app(app_id):
    fmk.close_app(app_id)

@server.on("close-all")
def request_close_all():
    while len(fmk.opened_apps) > 0:
        app_id = fmk.opened_apps[0].id_
        fmk.close_app(app_id)
        print(app_id)

@server.on("start-app-search")
def request_search(app_id, search_url):
    fmk.start_app_search(app_id, search_url)

@server.on("start-show")
def start_show(name, url):
    fmk.start_show(name, url)

@server.on("skip")
def skip():
    fmk.skip()

@server.on("forwards")
def forwards():
    fmk.forwards()

@server.on("backwards")
def backwards():
    fmk.backwards()

@server.on("fullscreen")
def fullscreen():
    fmk.fullscreen()

@server.on("play")
def play():
    fmk.play()

@server.on("next-show")
def next_show():
    fmk.next_show()

@server.on("volume")
def set_volume(val):
    fmk.set_volume(val)

@server.on("mute")
def set_mute():
    fmk.set_mute()

@server.on('mouse-canvas-move')
def mouse_canvas_move(raw_coordinates):
    if not fmk.moving_mouse:
        fmk.mouse_canvas_move(raw_coordinates)

@server.on('mouse-move')
def mouse_move(x, y):
    fmk.mouse_move(x, y)

@server.on('mouse-left')
def mouse_left():
    fmk.mouse_left()

@server.on('mouse-right')
def mouse_right():
    fmk.mouse_right()

@server.on('key-pressed')
def key_pressed(key):
    fmk.key_pressed(key)

@server.on('scroll')
def scroll(x, y):
    fmk.scroll(x, y)

# SERVER ROUTING
@web.route('/')
def index():
    return render_template("out-app.html")


def change_frontend_connection(ip_addr):
    global port

    framework_path = Path('static/framework.js').path

    file_path = os.path.join(os.getcwd(), framework_path)
    client_server = open(file_path, 'r')
    client_server_lines = client_server.readlines()
    for i, line in enumerate(client_server_lines):
        if line.rstrip().lstrip() == '//$SOCKET_IP':
            client_server_lines[i + 1] = '      socket = io.connect("http://' + ip_addr + ':' + str(
                port) + '"); //This line was autogenerated.\n'
            break

    client_server = open(file_path, 'w')
    client_server.writelines(client_server_lines)
    client_server.close()


def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("1.1.1.1", 80))
    ip_addr = s.getsockname()[0]
    s.close()
    return ip_addr

def compile_app():
    if config.DEBUG:
        input_file = 'app.html'
        path = Path('templates/').path
        compontents = Path('static/components').path
        output_file = 'out-app.html'

        compiler = Compiler(input_file, path, compontents, output_file)
        compiler.start()

def start():
    global port

    ip_addr = get_ip()
    change_frontend_connection(ip_addr)

    compile_app()

    connection_url = 'http://' + ip_addr + ':' + str(port)
    print("Server started at ip: %s" % (connection_url))

    server.run(web, host='0.0.0.0', port=port)

def start_offline():
    global port

    ip_addr = "10.42.0.1"
    change_frontend_connection(ip_addr)

    compile_app()

    connection_url = 'http://' + ip_addr + ':' + str(port)
    print("Server started at ip: %s" % (connection_url))

    server.run(web, host='0.0.0.0', port=port)